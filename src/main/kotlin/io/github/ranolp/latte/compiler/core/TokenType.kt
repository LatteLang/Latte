package io.github.ranolp.latte.compiler.core;

enum class TokenType(val keyword: Boolean = false, val operator: Char? = null) {
    ABSTRACT(keyword = true),
    AS(keyword = true),
    BREAK(keyword = true),
    // BY,
    CASE(keyword = true),
    CATCH(keyword = true),
    CLASS(keyword = true),
    COMPANION(keyword = true),
    CONST(keyword = true),
    CONTINUE(keyword = true),
    CROSSINLINE(keyword = true),
    DATA(keyword = true),
    DYNAMIC(keyword = true),
    ELSE(keyword = true),
    ENUM(keyword = true),
    FALSE(keyword = true),
    FINALLY(keyword = true),
    FN(keyword = true),
    FOR(keyword = true),
    GET(keyword = true),
    IF(keyword = true),
    IMPORT(keyword = true),
    IN(keyword = true),
    INFIX(keyword = true),
    INLINE(keyword = true),
    INNER(keyword = true),
    INTERFACE(keyword = true),
    IS(keyword = true),
    LATEINIT(keyword = true),
    LET(keyword = true),
    MUT(keyword = true),
    NOINLINE(keyword = true),
    NULL(keyword = true),
    OBJECT(keyword = true),
    OPEN(keyword = true),
    OPERATOR(keyword = true),
    OUT(keyword = true),
    OVERRIDE(keyword = true),
    PACKAGE(keyword = true),
    PRIVATE(keyword = true),
    PROTECTED(keyword = true),
    PUBLIC(keyword = true),
    REIFIED(keyword = true),
    RETURN(keyword = true),
    SET(keyword = true),
    SUPER(keyword = true),
    THIS(keyword = true),
    TRUE(keyword = true),
    TRY(keyword = true),
    WHEN(keyword = true),
    WHILE(keyword = true),
    // Operator
    PLUS(operator = '+'),
    MINUS(operator = '-'),
    ASTERISK(operator = '*'),
    SLASH(operator = '/'),
    PERCENT(operator = '%'),
    AND(operator = '&'),
    OR(operator = '|'),
    QUESTION(operator = '?'),
    COLON(operator = ':'),
    SEMICOLON(operator = ';'),
    DOT(operator = '.'),
    COMMA(operator = ','),
    EXCLAMATION(operator = '!'),
    LEFT_BRACKET(operator = '('),
    RIGHT_BRACKET(operator = ')'),
    LEFT_BRACE(operator = '['),
    RIGHT_BRACE(operator = ']'),
    LEFT_CURLY_BRACE(operator = '{'),
    RIGHT_CURLY_BRACE(operator = '}'),
    ASSIGN(operator = '='),
    // Other
    INTEGER,
    DECIMAL,
    STRING,
    CHAR,
    IDENTIFIER;

    override fun toString(): String = operator?.let { "'$it'" } ?: if (keyword) "'${super.toString().toLowerCase()}'" else super.toString().toLowerCase()
}
